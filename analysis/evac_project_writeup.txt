cos323 Final Project Write-up

Project Name:  Route Evacuation Analysis
Authors: David Paulk, Allan Jabri and Michael Newman
Professor: Szymon Rusinkiewicz
Due Date: 1/15/2012

_______________________________________________________________________________________

Approach:
	Overview-
	For our project, we wanted to analyze the different factors that affect a large quantity of people fleeing from a hazardous bomb detonation.  We assume for our project that the mass of people are evacuating by vehicle along a series of routes that make up a road network.  This road network consists of roads, intersections, and a detonation site.  Given this scenario, we implemented different classes describing the map of roadways, randomized flow of evacuators along them, simulation with the ability to change population, awareness and speed parameters, and visualization of the flow of evacuators after detonation as the radius of hazard due to the explosion grows.

	Simulation Model-
	Our Simulation runs instances of Routes.java and Explosion.java to create microscopic simulation models of evacuation, meaning that at each update
	of flow along the road networks, each individual person is simulated with probabilistic tendencies based on their distance from danger.  All units
	of pedestrian flow are accounted for by using queues to track which Intersections people are leaving and which Intersections they are traveling to,
	or more simply put, which roads they are traveling along.  The simulation of evacuation is a time-driven, and can be run for various parameter values.  The population can be any such that its value does not exceed the total capacity of the road network, in which case there could be no movement of flow, and everyone in the population would consequently be wiped out by the Explosion instance.

	Roadway Characteristics-
	The roads in this evacuation simulation are edges with values for flow, capacity, a 'to'-node and a 'from'-node.  These nodes that characterize the
	beginning and the end of a road-edge are Intersection nodes.  These Intersection nodes are a class of Objects that contain a Point Object-type coordinate pair, a queue for the flow of edges directed at the Intersection, and a queue for the flow of edges directed away from the Intersection.  The detonation site is simply a coordinate pair at which the Explosion instance is centered at its creation, upon which the 'safe-zone' transgresses from embodying the entire road network to embodying none of the road network.  By the time that the hazard radius has expanded past all reachable edges and vertices in the road network, the instance of Simulation for that particular input terminates, and the numbers of dead and alive people post-Explosion in the population are tallied.  For these tallies, the dead group consists of all flow that was surpassed by the radius of hazard before it could reach the virtual sink of the flow network (city limits, where there are no further edges from the detonation site/ origin).

	Time Increments-
	The evacuation process along the road network is illustrated in parallel with the expansion of the hazard radius about the detonation site.  The visualization of these two things are crucial because they both involve algorithms specific to the road network characteristics and other parameter inputs. The evacuation process involves several parameter-sensitive algorithms, including flow updates and an 'awareness factor' relating to the path decision-making of people along various roads depending on the distance of the closest point on the hazard radius circle.  The expansion of the hazard radius given by the output of Explosion is also a parameter-sensitive algorithm, being a function that is both dependent of input 't' and non-linear.

_______________________________________________________________________________________

Code:

Routes.java-
To represent the roadway maps as data structured that can be incremented through characteristics such as capacity and population flow values, a class called Routes.java reads in roadways, creates a flow network for them, and updates transfer of flow during each time-step in simulation.  Using the edge weighted directed graph instance, roads were represented by directed and weighted edges, while road-intersections were represented by the graph's vertices.
	These road-intersections vertices were given integer values as a basic graphic representation of a network of points would, but for Routes.java, each integer in the digraph corresponds with an 'Intersection' node given by a symbol table key (Integer) value (Intersection) pair.  For each Intersection node, x and y-coordinate values are stored, as well as each directed road flowing into and out of the given Intersection.  To quickly output the Intersections adjacent to a given Intersection, a second symbol table
 was created containing Intersection keys paired with an Iterable list of adjacent Intersection values.  This is most heavily used in creation of FlowEdge instances for the
	FlowNetwork.  In the FlowNetwork, people are randomly added to roads with the constraining factors of population and road capacities.  Last, a FordFulkerson instance is created using the FlowNetwork input to algorithmically analyze the mincut and maxflow of a given road network.  This is the output for each new population and road network scenario that is collected as data from simulation, discussed in more depth in the the following parts.

Intersection.java-
	Creates an intersection that is used as a vertex-node in a flow network.  Each
Intersection is characterized by a coordinate pair for spatial representation, whether
that road is horizontal or vertical for fast input parsing, and a series of incoming and
outgoing directed edges which are roads in the map upon which evacuating traffic can travel.

Point.java- 
	Creates a point with a pair of coordinates.  It is used in Intersection.java as a characteristic of a given intersection and also in its compareTo() method so that
Intersections may be used as keys in a symbol table.  For the comparison of any two
Intersections, the points unique to each of the two intersection are compared by y-value, breaking ties by x-value if the y-values are equal.  Also gives coordinates the ability
to be compared by slope with respect to an angle-vertex if desired.

Simulation.java-
	Creates evacuation simulation for a certain number of trials and population size as parameter values.  Each individual simulation runs until a final tally has been determined for who has survived and who has died from the hazard during the evacuation.

Explosion.java-
	Algorithm which describes the rate of hazard radius increase for a gas-bomb explosion from a researched model.

DrawExplosion.java-
	Animates (through StdDraw.java) the ring of hazard radius expanding about a focal detonation point.

Stats.m-
	Calculates and outputs the sample mean, variance, and standard deviation for proportion of dead or alive persons in the population after all simulation trials are run and given as array-type input.  Also plots the Gaussian distribution by the best computational formula given to us from the Statistics lecture this term.

________________________________________________________________________________________

	The code for the Route Evacuation Analysis Project was broken up into three general parts: 
		1) data representation of routes (digraph, flow network) compatible with various route map and population parameters
		2) simulation using varied parameter values on the digitized routes
		3) visualization for a clearer depiction of the concepts our project aims to present through varied detonation scenarios

	Part 1 (Road Network Construction; Constrained Optimization Analysis Under Pseudorandom Flow Conditions)
		
	Part 2 (Parameter Variant Evacuation Simulation)

	Part 3 (Network Flow and Detonation Visualization)

________________________________________________________________________________________

Data:
 
 As a control test, we followed the 'Doubling-hypothesis' method of testing to find how
 the ratio of dead to alive changed for different population parameter inputs, found through
 10 simulations of each population size.

 For the unit_length_roads.txt map, a kinetic energy of bomb value of 10, road capacity of 12, and...
 
 ... for a population of 200

 time  alive  dead  escaped  total
 0     200    0     0        200
 1     117    0     83       200
 2     87     17    96       200
 3     75     17    108      200
 4     42     17    141      200
 5     0      46    154      200

 ... for a population of 400

 time  alive  dead  escaped  total
 0     400    0     0        400
 1     359    41    0        400
 2     359    41    0        400
 3     292    108   0        400
 5     292    108   0        400
 6     292    108   0        400
 7     260    140   0        400
 8     260    140   0        400
 9     260    140   0        400
10     260    140   0        400
11     260    140   0        400
12     260    140   0        400
13     260    140   0        400
14     0      400   0        400



 For population size of 2^6

            Dead Proportion    Alive Proportion
     mean
      var
  std dev

 For population size of 2^7

            Dead Proportion    Alive Proportion
     mean
      var
  std dev
   
 For population size of 2^8

            Dead Proportion    Alive Proportion
     mean
      var
  std dev

 For population size of 2^9

            Dead Proportion    Alive Proportion
     mean
      var
  std dev

 For population size of 2^10

            Dead Proportion    Alive Proportion
     mean
      var
  std dev

 For the control test, a constant value for the awareness parameter was used.  Below, results
 for the same test but with 4 different awareness levels are performed again.

 ... 
________________________________________________________________________________________

Analysis:

The tests that were crucial to understanding the patterns in bottlenecks and the ratio of dead
to alive post evacuation were the test of how doubling the population alone affects flow, and
second, how the awareness level effects the efficiency of evacuation, and whether or not the 
awareness level becomes increasingly important as the population size increases.

Evacuation is a scenario that is important to the everyday lives of those who live or work in
large urban environments.  One could simply imagine that the evacuation from the environment is
not due to a hazardous detonation, but rather rush-hour after work or some high traffic scenario
of the sort.  Such scenarios are crucial to analyze for understanding optimal efficiency of the
evacuator and also the efficiency of the road network creator.